<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="utf-8" />
  <title>SR 520 Construction | WSDOT</title>

    <!-- Leaflet and Leaflet.draw CDN -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css"/>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk" async defer></script>


 <!-- <script>
    (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
      key: "AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk",
      v: "weekly"

    }); 
</script>  -->

<script src="https://unpkg.com/leaflet.gridlayer.googlemutant@latest/dist/Leaflet.GoogleMutant.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet"
type="text/css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">    
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.min.js" crossorigin="anonymous"></script> 
  </head>
  <body>
    <div class="container">
        <section class="form-area mt-5 ml-5 mr-5">
 
    <form action="/api/projects" method="post" enctype="multipart/form-data">

        <!-- Construction Activity Name -->
        <div class="mb-3">
            <label for="activityName" class="form-label">Construction Actvity Title</label>
            <input type="text" class="form-control" id="activityName" name="activityName">
        </div>
        <div class="mb-3">
            <label for="location" class="form-label">Location</label>
            <input type="text" class="form-control" id="location" name="location" placeholder="Address, cross streets, etc.">
        </div>
    
        <!-- Start Date -->
        <div class="mb-3">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" class="form-control" id="startDate" name="startDate">
        </div>
    
        <!-- End Date -->
        <div class="mb-3">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" class="form-control" id="endDate" name="endDate">
        </div>
    
        <!-- Time -->
        <div class="mb-3">
            <label for="time" class="form-label">Time</label>
            <input type="text" class="form-control" id="time" name="time" placeholder="10:00 AM - 5:00 PM">
        </div>
    
        <!-- Timing Features -->
        <div class="mb-3">
            <p>Timing Features</p>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Around-the-clock" id="aroundTheClock" name="timingFeatures[]">
                <label class="form-check-label" for="aroundTheClock">Around-the-clock</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Nighttime" id="nighttime" name="timingFeatures[]">
                <label class="form-check-label" for="nighttime">Nighttime</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Daytime" id="daytime" name="timingFeatures[]">
                <label class="form-check-label" for="daytime">Daytime</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Overnight" id="overnight" name="timingFeatures[]">
                <label class="form-check-label" for="overnight">Overnight</label>
            </div>
        </div>
    
        <!-- Activity Description -->
        <div class="mb-3">
            <label for="description" class="form-label">Activity Description</label>
            <textarea class="form-control" id="description" rows="4" name="description"></textarea>
        </div>
    
         <!-- Activity Description -->
    
        <!-- Activity Type -->    <div class="mb-3">
            <label for="trafficDescription" class="form-label">Traffic Description</label>
            <textarea class="form-control" id="trafficDescription" rows="4" name="trafficDescription"></textarea>
        </div>
        <div class="mb-3">
            <p>Activity Type</p>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Full highway closure" id="fullHighway" name="activityType[]">
                <label class="form-check-label" for="fullHighway">Full highway closure</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Partial highway closure" id="partialHighway" name="activityType[]">
                <label class="form-check-label" for="partialHighway">Partial highway closure</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Street or lane closure" id="streetClosure" name="activityType[]">
                <label class="form-check-label" for="streetClosure">Street or lane closure</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Trail closure" id="trailClosure" name="activityType[]">
                <label class="form-check-label" for="trailClosure">Trail closure</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Ramp closure" id="rampClosure" name="activityType[]">
                <label class="form-check-label" for="rampClosure">Ramp closure</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="High-impact construction" id="highImpact" name="activityType[]">
                <label class="form-check-label" for="highImpact">High-impact construction</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="High-impact construction" id="" name="activityType[]">
                <label class="form-check-label" for="highImpact">Cameras</label>
            </div>
        </div>
    
        <!-- Impact Type -->
        <div class="mb-3">
            <p>Impact Type</p>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Bike/pedestrian" id="bikePedestrian" name="impactType[]">
                <label class="form-check-label" for="bikePedestrian">Bike/pedestrian</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Light" id="light" name="impactType[]">
                <label class="form-check-label" for="light">Light</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Traffic" id="traffic" name="impactType[]">
                <label class="form-check-label" for="traffic">Traffic</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Dust" id="dust" name="impactType[]">
                <label class="form-check-label" for="dust">Dust</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Noise" id="noise" name="impactType[]">
                <label class="form-check-label" for="noise">Noise</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="Vibration" id="vibration" name="impactType[]">
                <label class="form-check-label" for="vibration">Vibration</label>
            </div>
        </div>
    
        <!-- Graphic/Photo Upload -->
        <div class="mb-3">
            <label for="file" class="form-label">Upload a Graphic/Photo</label>
            <input type="file" class="form-control" id="file" name="file">
        </div>
    <div class="mb-3">
        <label class="form-label">Map</label>
    
        <!-- Color and width pickers added above the map -->
        <div class="map-controls">
            <label for="colorPicker">Choose a color:</label>
            <input type="color" id="colorPicker" name="color" value="#f4661a">
    
            <label for="widthPicker" style="margin-left: 20px;">Choose line width:</label>
            <input type="number" id="widthPicker" name="width" min="1" max="10" value="8">
        </div>
        
        <!-- Your existing map container -->
        <div id="map" style="width: 1200px; height: 600px;">    
        </div>
    
        <input type="hidden" id="mapData" name="mapData">
    </div>

 
<!-- Banner content? -->
<div class="mb-3">
    <label for="bannerContent" class="form-label">Banner content?</label>
    <select class="form-control" id="bannerContent" name="bannerContent">
        <option value="yes">Yes</option>
        <option value="no">No</option>
    </select>
</div>

<!-- Start Date -->
<div class="mb-3">
    <label for="postDate" class="form-label">Post online on:</label>
    <input type="date" class="form-control" id="postDate" name="postDate" required>
</div>

<!-- End Date -->
<div class="mb-3">
    <label for="removeDate" class="form-label">Remove post on:</label>
    <input type="date" class="form-control" id="removeDate" name="removeDate">
</div>

    <!-- Contact Block -->
    <div class="mb-3">
        <label for="contact" class="form-label">Contact Block</label>
        <select class="form-select" id="contact" name="contact">
            <option value="address1">Address 1</option>
            <option value="address2">Address 2</option>
            <option value="address3">Address 3</option>
            <!-- Add more options as needed -->
        </select>
    </div>

    <!-- Submit Button -->
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
        </section>

    </div>
    <% if (success_msg && success_msg.length > 0) { %>
        <div class="alert alert-success">
            <%= success_msg %>
        </div>
    <% } %>
    <div id="errorMessage" style="color: red;">
    <% if (error_msg && error_msg.length > 0) { %>
        <div class="alert alert-danger">
            <%= error_msg %>
        </div>
    <% } %>
</div>
<!-- END Form's HTML -->


<script>
    // Create the Leaflet map
    const map = L.map('map').setView([47.6407, -122.2971], 13);
    
    // Add Google Map layer to Leaflet map
    L.gridLayer.googleMutant({
        type: 'roadmap',
        maxZoom: 20,
        apiKey: 'AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk'
    }).addTo(map);
  
    // Define activity icons
    const activityIcons = {
        "Full highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Partial highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Street and lane closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Ramp closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "High-impact construction": "https://sr520construction.blob.core.windows.net/520-uploads/high_impact_construction.png",
        "Trail closure": "https://sr520construction.blob.core.windows.net/520-uploads/trail_closure.png"
    };
    
    // Define default styling values
    const defaultColor = '#f4661a';
    const defaultWidth = 8;
    
    function fetchMapDataForProject(projectId) {
        const apiUrl = `/api/projects/${projectId}/mapData`;
  
        fetch(apiUrl)
            .then(response => response.json())
            .then(project => {
                if (!project.mapData || !Array.isArray(project.mapData)) {
                    console.warn(`Invalid mapData for project with ID ${project._id}`);
                    return;
                }
                
                let geoJSONData = null;
                if (typeof project.mapData[1] === 'string') {
                    try {
                        geoJSONData = JSON.parse(project.mapData[1]);
                    } catch (e) {
                        console.warn(`Failed to parse GeoJSON for project with ID ${project._id}:`, e);
                        return;
                    }
                }
  
                if (!geoJSONData) {
                    console.warn(`GeoJSON data is missing or invalid for project with ID ${project._id}`);
                    return;
                }
  
                const formattedStartDate = moment(project.startDate).format('MM/DD/YYYY');
                const formattedEndDate = moment(project.endDate).format('MM/DD/YYYY');
                const timingFeaturesHTML = project.timingFeatures.map(feature => `
                    <img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">
                    ${feature}
                `).join(' ');
  
                const popupContent = `
                    <div class="popup-content">
                        <h3>${project.activityName}</h3>
                        <p><span style="font-weight: 600">Start:</span> ${formattedStartDate}<br>
                        <span style="font-weight: 600">End:</span> ${formattedEndDate}<br>
                        <span style="font-weight: 600">Time:</span> ${project.time}</p>
                        <div class="timing-features">${timingFeaturesHTML}</div>                         
                        <p>${project.description || "Not specified"}</p>
                        <a href="/projects/${project._id}" class="greenBtn mt-3 mb-2" style="background-color: #cbdcb2; padding: 10px; color: #000; font-weight: 600; border-radius: 5px;" target="_blank">More information</a><br>
                        <div class="popup-image mt-2" style="max-width: 480px; object-fit: cover;">                            
                        ${project.imageUrl ? `<img src="${project.imageUrl}" alt="Image for ${project.activityName}" class="popimg" id="popimg" style="display: flex; max-width: 480px;">` : ''}
                        </div>
                    </div>
                `;
  
                const iconUrl = activityIcons[project.activityType[0]];
                if (!iconUrl) {
                    console.warn(`No icon URL found for type: ${project.activityType[0]}`);
                    return;
                }
  
                const customIcon = L.icon({
                    iconUrl: iconUrl,
                    iconSize: [26, 26],
                    popupAnchor: [0, -41]
                });
  
                L.geoJSON(geoJSONData, {
                    style: function(feature) {
                        return {
                            color: feature.properties.color || defaultColor,
                            weight: feature.properties.width || defaultWidth
                        };
                    },
                    pointToLayer: function (feature, latlng) {
                        return L.marker(latlng, { icon: customIcon });
                    },
                    onEachFeature: function (feature, layer) {
                        layer.bindPopup(popupContent, {
                            autoPan: true,
                            autoPanPaddingTopLeft: L.point(10, 50),
                            autoPanPaddingBottomRight: L.point(10, 10)
                        });
                    }
                }).addTo(map);
            })
            .catch(error => console.error('Error fetching map data:', error));
    }
  
    // Extract the projectId from the URL
    const urlParts = window.location.pathname.split('/');
    const projectId = urlParts[2];  // Assumes the URL structure is like /projects/<projectId>
  
    fetchMapDataForProject(projectId);
  </script>
  
    
  </body>
</html>


