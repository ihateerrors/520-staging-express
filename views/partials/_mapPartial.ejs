<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map</title>

    <!-- Bootstrap 5 CSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous">
 
<!-- Leaflet CSS -->


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.css" />

<script src="https://unpkg.com/leaflet@latest/dist/leaflet.js"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk"></script>
<script src="https://unpkg.com/leaflet.gridlayer.googlemutant@latest/dist/Leaflet.GoogleMutant.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" crossorigin="anonymous"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js"></script> -->

<style>
    .toggle-icon {
    display: none;
    font-size: 24px;
    cursor: pointer;
    margin: 10px;
}

/* Hide form and show toggle icon on smaller screen sizes */
@media (max-width: 600px) {
    form {
        display: none;
    }
    .toggle-icon {
        display: block;
    }
    .mapcontainer, #map {
     min-width: 90vw;
     margin-left: 5px;
     margin-right: 5px;
     padding-left: 1px;
     padding-right: 1px;
    }
}


</style>

</head>
<body>

<!-- <div class="exp-map" style="width: 100%"> -->

    <div class="exp-map" style="width: 100%">
    <div class="container-fluid" style="display: block;">
                         <div class="row">
                           <div class="col-lg-2 col-md-3 col-sm-12">
                                <div class="toggle-icon">
                                    <i class="fas fa-bars"></i>
                                </div>
                            <form id="filterForm" class="mt-5">
                                <div class="row">
                                    <div class="col-sm-6 col-md-12 mt-2">
                                        <div class="form-group"><label>Start Date</label><input type="date" class="form-control" style="font-size: 1em"
                                                id="start" /></div>
                                    </div>
                                    <div class="col-sm-6 col-md-12 mt-2">
                                        <div class="form-group"><label>End Date</label><input type="date" class="form-control" style="font-size: 1em"
                                                id="end" /></div>
                                    </div>
                                    </div>
                                    <div class="form-group d-flex flex-column mt-4 mb-4" id="constructionType">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input" id="selectAll" name="type" value="all" checked>
                                            <label class="form-check-label" for="selectAll">All</label>
                                        </div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="fullHighway" name="type"
                                                value="Full highway closure"><label class="form-check-label" for="fullHighway">Full highway closures</label>
                                        </div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="partialHighway" name="type"
                                                value="Partial highway closures"><label class="form-check-label" for="partialHighway">Partial highway
                                                closures</label></div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="streetLane" name="type"
                                                value="Street and lane closures"><label class="form-check-label" for="streetLane">Street and lane
                                                closures</label></div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="trail" name="type"
                                                value="Trail closures"><label class="form-check-label" for="trail">Trail closures</label></div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="ramp" name="type"
                                                value="Ramp closures"><label class="form-check-label" for="ramp">Ramp closures</label></div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="highImpact" name="type"
                                                value="High-impact construction"><label class="form-check-label" for="highImpact">High-impact
                                                construction</label></div>
                                        <div class="form-check"><input type="checkbox" class="form-check-input" id="cameras" name="type"
                                                value="Cameras"><label class="form-check-label" for="cameras">Cameras</label></div>
                                    </div>
                                    <!-- <button type="submit" id="filterSubmit" class="btn-success greenBtn"
                                        style="background-color: rgb(0, 76, 63); margin-bottom: 14px; align-self: center; border-radius: 5px;">Submit</button> -->
                                        <button type="submit" id="filterSubmit" class="btn-success greenBtn" style="background-color: rgb(0, 76, 63); margin-bottom: 14px; align-self: center; border-radius: 5px;">Submit</button>

                                    </form>
                                    </div>
                                    <div class="col-lg-10 col-sm-12 col-md-9">
                                        <div id="map"></div>
                                    </div>
                       </div>
                </div>                  
        </div>
    
            <script>
document.addEventListener("DOMContentLoaded", function(){
    function setupDateDefaults() {
        const currentDate = new Date();
        const oneWeekAgo = new Date(currentDate - 7 * 24 * 60 * 60 * 1000);
        
        document.getElementById('start').valueAsDate = oneWeekAgo;
        document.getElementById('end').valueAsDate = currentDate;
    }

   
    const apiKey = 'AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk';
    const map = L.map('map').setView([47.6407, -122.2971], 14);

    L.gridLayer.googleMutant({
        type: 'roadmap',
        maxZoom: 20,
        apiKey: apiKey
    }).addTo(map);

    const activityIcons = {
        "Full highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Partial highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Street and lane closures": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Ramp closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "High-impact construction": "https://sr520construction.blob.core.windows.net/520-uploads/high_impact_construction.png",
        "Trail closure": "https://sr520construction.blob.core.windows.net/520-uploads/trail_closure.png",
        "Cameras": "https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png"
    };

    const mapLayerGroup = L.layerGroup().addTo(map);
    const defaultColor = '#f4661a';
    const defaultWidth = 8;

    initCameraMarkers(map);
    setupDateDefaults();
    setupCheckboxesBehavior();
    setupFormSubmission();
    fetchMapData();

    function initCameraMarkers(map){
     
            const mapCameras = {
                    "Montlake Freeway Station": [47.6427395, -122.3039562],
                    "Montlake Blvd": [47.6406178, -122.3058297],
                    "Evergreen Point Lid": [47.6423737, -122.2412252],
                    "84th Ave NE Lid": [47.6335835, -122.2102367],
                    "92nd Ave NE Lid": [47.6298285, -122.2057622],
                    "Bellevue Way Lid": [47.6182216, -122.2054495],
                    "Yarrow Point Lid": [47.6475817, -122.2196779],
                    "Hunts Point": [47.6450325, -122.2258702],
                    "Medina Lid": [47.6270626, -122.2389892],
                    "I-5/NE 45th St": [47.661095, -122.313153],
                    "Montlake/520 Interchange": [47.6406806, -122.3037303],
                    "SR 520/NE 148th St": [47.731715, -122.144903],
                    "SR 520/Redmond Way": [47.673978, -122.121263],
                        };

        const cameras = L.layerGroup();
        Object.entries(mapCameras).forEach(([name, coordinates]) => {
            const cameraIcon = L.icon({
                iconUrl: "https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png",
                iconSize: [26, 26],
                popupAnchor: [0, -41],
                 shadowUrl: null  // Add this line
            });
            const marker = L.marker(coordinates, { icon: cameraIcon }).addTo(cameras);
            marker.bindPopup();
        });
        cameras.addTo(map);
    }

    function fetchMapData(startDate='', endDate='', types=[]){
        mapLayerGroup.clearLayers();
        const apiUrl = `/api/projects?startDate=${startDate}&endDate=${endDate}&types=${types.join(",")}`;
        console.log('Fetching data from:', apiUrl);

        fetch(apiUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(handleFetchedData)
            .catch(error => console.error('Error fetching map data:', error));
    }

    function handleFetchedData(data) {
    console.log('Data received:', data);
    if (data && Array.isArray(data) && data.length > 0) {
        data.forEach(project => {
            if (!project.mapData || !Array.isArray(project.mapData)) {
                console.warn(`Invalid mapData for project with ID ${project._id}`);
                return;
            }

            let geoJSONData = null;
            if (typeof project.mapData[1] === 'string') {
                try {
                    geoJSONData = JSON.parse(project.mapData[1]);
                } catch (e) {
                    console.warn(`Failed to parse GeoJSON for project with ID ${project._id}:`, e);
                    return;
                }
            }

            if (!geoJSONData) {
                console.warn(`GeoJSON data is missing or invalid for project with ID ${project._id}`);
                return;
            }

            const formattedStartDate = moment(project.startDate).format('MM/DD/YYYY');
            const formattedEndDate = moment(project.endDate).format('MM/DD/YYYY');

            const timingFeaturesHTML = project.timingFeatures.map(feature =>
                `<img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">${feature}`
            ).join(' ');

            const activityTypeHTML = project.activityType.map(type =>
                `<img src="${activityIcons[type] || "https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png"}" alt="Checked Mark" width="25" height="25">${type}`
            ).join(' ');

            const popupContent = `
            <div class="popup-content">
               <h3>${project.activityName}</h3>
               <p><span style="font-weight: 600">Start:</span>${formattedStartDate}<br>
               <span style="font-weight: 600">End:</span>${formattedEndDate}<br>
               <span style="font-weight: 600">Time:</span>${project.time}</p>
               <div class="timing-features">${timingFeaturesHTML}&nbsp;&nbsp;&nbsp;${activityTypeHTML}</div>
               <p>${project.description || "Not specified"}</p>
               <a href="/projects/${project._id}" class="greenBtn mt-3 mb-4" style="background-color: #243b3b; padding: 10px; color: #000; font-weight: 600; border-radius: 5px;" target="_blank">More information</a><br><br>
            </div>`;

            const iconUrl = activityIcons[project.activityType[0]];
            if (!iconUrl) {
                console.warn(`No icon URL found for type: ${project.activityType[0]}`);
                return;
            }

            const customIcon = L.icon({
                iconUrl: iconUrl,
                iconSize: [26, 26],
                popupAnchor: [0, -41]
            });

            L.geoJSON(geoJSONData, {
                style: function (feature) {
                    return {
                        color: feature.properties.color || defaultColor,
                        weight: feature.properties.width || defaultWidth
                    };
                },
                pointToLayer: function (feature, latlng) {
                    return L.marker(latlng, { icon: customIcon });
                },
                onEachFeature: function (feature, layer) {
                    layer.bindPopup(popupContent, {
                        autoPan: true,
                        autoPanPaddingTopLeft: L.point(10, 50),
                        autoPanPaddingBottomRight: L.point(10, 10)
                    });
                }
            }).addTo(mapLayerGroup);  // assuming `mapLayerGroup` is the correct layer group you want to add to
        });
    } else {
        console.log('No valid data received or data is empty');
    }
}
    function setupCheckboxesBehavior(){
        document.querySelectorAll('input[type="checkbox"][name="activityType"]').forEach(checkbox => {
            checkbox.addEventListener('change', function(){
                document.getElementById('selectAll').checked = false;
            });
        });

        document.getElementById('selectAll').addEventListener('change', function(){
            const isChecked = this.checked;
            document.querySelectorAll('input[type="checkbox"][name="activityType"]').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
        });
    }

                    function setupFormSubmission(){
                        document.getElementById('filterForm').addEventListener('submit', function(e){
                            e.preventDefault();

                            const startDate = document.getElementById('start').value;
                            const endDate = document.getElementById('end').value;
                            const types = Array.from(document.querySelectorAll('input[type="checkbox"][name="activityType"]:checked')).map(input => input.value);

                            fetchMapData(startDate, endDate, types);
                        });
                    }
                });
</script>

     
         <!-- <script>
                 $(document).ready(function() {
                    $('.toggle-icon').click(function() {
                        $('form').toggle(); // Toggles visibility of the form

                        // Switches the icon when the form is visible/invisible
                        if ($('form').is(':visible')) {
                            $('.toggle-icon i').removeClass('fa-filter').addClass('fa-times');
                        } else {
                            $('.toggle-icon i').removeClass('fa-times').addClass('fa-filter');
                        }
                    });
                });
        </script>
         -->
       
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" crossorigin="anonymous"></script>

</body>
</html>


<script>

    
</script>