


<script>



Of course. Below is the complete, unabbreviated version of your JavaScript code, integrating all the improvements and suggestions provided earlier:

javascript
Copy code
// Create the Leaflet map
const map = L.map('map').setView([47.6407, -122.2971], 14);

// Add Google Map layer to Leaflet map
L.gridLayer.googleMutant({
    type: 'roadmap',
    maxZoom: 20,
    apiKey: 'YOUR_API_KEY'
}).addTo(map);

// Define activity icons
const activityIcons = {
    "Full highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
    "Partial highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
    "Street and lane closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
    "Ramp closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
    "High-impact construction": "https://sr520construction.blob.core.windows.net/520-uploads/high_impact_construction.png",
    "Trail closure": "https://sr520construction.blob.core.windows.net/520-uploads/trail_closure.png",
    "Cameras": "https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png"
};

const mapLayerGroup = L.layerGroup().addTo(map);

// Define default styling values
const defaultColor = '#f4661a';
const defaultWidth = 8;

function fetchMapData(startDate = '', endDate = '', types = []) {
    // Clear previous map layers
    mapLayerGroup.clearLayers();

    const apiUrl = `/api/projects?startDate=${startDate}&endDate=${endDate}&types=${types.join(",")}`;
    console.log('Fetching data from:', apiUrl);

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            console.log('Data received:', data);

            if (data && data.length > 0) {
                data.forEach(project => {
                    if (!project.mapData || !Array.isArray(project.mapData)) {
                        console.warn(`Invalid mapData for project with ID ${project._id}`);
                        return;
                    }

                    let geoJSONData = null;
                    if (typeof project.mapData[1] === 'string') {
                        try {
                            geoJSONData = JSON.parse(project.mapData[1]);
                        } catch (e) {
                            console.warn(`Failed to parse GeoJSON for project with ID ${project._id}:`, e);
                            return;
                        }
                    }

                    if (!geoJSONData) {
                        console.warn(`GeoJSON data is missing or invalid for project with ID ${project._id}`);
                        return;
                    }

                    const formattedStartDate = moment(project.startDate).format('MM/DD/YYYY');
                    const formattedEndDate = moment(project.endDate).format('MM/DD/YYYY');

                    const timingFeaturesHTML = project.timingFeatures.map(feature => `
                        <img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">${feature}
                    `).join(' ');

                    const activityTypeHTML = project.activityType.map(type => `
                        <img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">${type}
                    `).join(' ');

                    const popupContent = `
                        <div class="popup-content">
                            <h3>${project.activityName}</h3>
                            <p>
                                <span style="font-weight: 600">Start:</span>${formattedStartDate}<br>
                                <span style="font-weight: 600">End:</span>${formattedEndDate}<br>
                                <span style="font-weight: 600">Time:</span>${project.time}
                            </p>
                            <div class="timing-features">${timingFeaturesHTML}&nbsp;&nbsp;&nbsp;${activityTypeHTML} </div>
                            <p>${project.description || "Not specified"}</p>
                            <a href="/projects/${project._id}" class="greenBtn mt-3 mb-4" style="background-color: #243b3b; padding: 10px; color: #000; font-weight: 600; border-radius: 5px;" target="_blank">More information</a>
                            <br><br>
                            <p>
                                <span style="font-weight: 600; color: #007b5f;">CONTACT</span><br/>
                                Email: sr520bridge@wsdot.wa.gov<br/>
                                24-hour construction hotline: ${project.contact} 
                            </p>
                        </div>
                    `;

                    const iconUrl = activityIcons[project.activityType[0]];

                    if (!iconUrl) {
                        console.warn(`No icon URL found for type: ${project.activityType[0]}`);
                        return;
                    }

                    const customIcon = L.icon({
                        iconUrl: iconUrl,
                        iconSize: [26, 26],
                        popupAnchor: [0, -41]
                    });

                    L.geoJSON(geoJSONData, {
                        style: function (feature) {
                            return {
                                color: feature.properties.color || defaultColor,
                                weight: feature.properties.width || defaultWidth
                            };
                        },
                        pointToLayer: function (feature, latlng) {
                            return L.marker(latlng, {
                                icon: customIcon
                            });
                        },
                        onEachFeature: function (feature, layer) {
                            layer.bindPopup(popupContent, {
                                autoPan: true,
                                autoPanPaddingTopLeft: L.point(10, 50),
                                autoPanPaddingBottomRight: L.point(10, 10)
                            });
                        }
                    }).addTo(mapLayerGroup);
                });
            }
        })
        .catch(error => console.error('Error fetching map data:', error));
}

// Initial fetch of map data
fetchMapData();

document.addEventListener("DOMContentLoaded", function () {
    // Get the current date
    var today = moment().format('YYYY-MM-DD');

    // Calculate the date two weeks from today
    var twoWeeksLater = moment().add(14, 'days').format('YYYY-MM-DD');

    // Set the placeholder value for the start date input
    document.getElementById('start').setAttribute('value', today);

    // Set the value value for the end date input
    document.getElementById('end').setAttribute('value', twoWeeksLater);
});

// Get reference to the mapData element from the form
const mapDataElement = document.getElementById('mapData');

if (mapDataElement && mapDataElement.value) {
    try {
        const geoJSONData = JSON.parse(mapDataElement.value);
        L.geoJSON(geoJSONData, {
            style: function (feature) {
                return {
                    color: feature.properties.color || defaultColor,
                    weight: feature.properties.width || defaultWidth
                };
            }
        }).addTo(map);
    } catch (error) {
        console.warn("Failed to parse mapData from form:", error);
    }
}

let previousView = null;

map.on('popupopen', function () {
    previousView = {
        center: map.getCenter(),
        zoom: map.getZoom()
    };
});

map.on('popupclose', function () {
    if (previousView) {
        map.setView(previousView.center, previousView.zoom);
    }
});

document.addEventListener('DOMContentLoaded', function () {
    const allCheckbox = document.getElementById('all');
    const otherCheckboxes = document.querySelectorAll("input[name='type']:not(#all)");

    otherCheckboxes.forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
            if (this.checked) {
                allCheckbox.checked = false;
            } else {
                const anyChecked = Array.from(otherCheckboxes).some(chk => chk.checked);
                if (!anyChecked) {
                    allCheckbox.checked = true;
                }
            }
        });
    });

    allCheckbox.addEventListener('change', function () {
        if (this.checked) {
            otherCheckboxes.forEach(chk => chk.checked = false);
        }
    });
});

document.querySelector('form').addEventListener('submit', function (e) {
    e.preventDefault();

    const startDate = document.getElementById('start').value;
    const endDate = document.getElementById('end').value;
    const checkboxes = document.querySelectorAll('input[name="type"]:checked');
    let types = [];

    checkboxes.forEach(checkbox => {
        types.push(checkbox.value);
    });

    if (document.getElementById('all').checked) {
        types = [];
    }

    fetchMapData(startDate, endDate, types);
});

const mapCameras = {
    "Montlake Freeway Station": [47.6427395, -122.3039562],
    "Montlake Blvd": [47.6406178, -122.3058297],
    "Evergreen Point Lid": [47.6423737, -122.2412252],
    "84th Ave NE Lid": [47.6335835, -122.2102367],
    "92nd Ave NE Lid": [47.6298285, -122.2057622],
    "Bellevue Way Lid": [47.6182216, -122.2054495],
    "Yarrow Point Lid": [47.6475817, -122.2196779],
    "Hunts Point": [47.6450325, -122.2258702],
    "Medina Lid": [47.6270626, -122.2389892],
    "I-5/NE 45th St": [47.661095, -122.313153],
    "Montlake/520 Interchange": [47.6406806, -122.3037303],
    "SR 520/NE 148th St": [47.731715, -122.144903],
    "SR 520/Redmond Way": [47.673978, -122.121263],
};

const cameras = L.layerGroup();

Object.entries(mapCameras).forEach(([name, coordinates]) => {
    const cameraIcon = L.icon({
        iconUrl: "https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png",
        iconSize: [26, 26],
        popupAnchor: [0, -41]
    });

    const marker = L.marker(coordinates, {
        icon: cameraIcon
    }).addTo(cameras);

    marker.bindPopup(`<strong>${name}</strong><br>Click <a href="#">here</a> to view camera feed.`);
});

cameras.addTo(map);



</script>

</body>
</html>
