<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8" />
<!-- 
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-970887-21"></script>
  <script>window.dataLayer = window.dataLayer || []; function gtag() {dataLayer.push(arguments)}; gtag("js", new Date()); gtag("set", "developer_id.dMDhkMT", true); gtag("config", "UA-970887-21", {"groups": "default", "anonymize_ip": true, "page_placeholder": "PLACEHOLDER_page_path"});</script> -->
  <link rel="canonical" href="#" />
  <meta name="description"
    content="View current major projects, which are investments we make with local partners to address safety, congestion, mobility for all users and/or fish passage responsibilities." />

  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" href="img/dot.ico" type="image/vnd.microsoft.icon" />
  
  <title>SR 520 Construction | WSDOT</title>

  <link rel="stylesheet" media="all" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css"
    integrity="sha256-bZLfwXAP04zRMK2BjiO8iu9pf4FbLqX6zitd+tIvLhE=" crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    
    
    <link rel="stylesheet" media="all" href="https://fonts.googleapis.com/css2?family=Lato:wght@100;300;400;700;900&amp;display=swap" />
    <link rel="stylesheet" media="all" href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&amp;display=swap" />
    
    <script src="https://kit.fontawesome.com/da8d22a218.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous">
    <!-- <link rel="stylesheet" media="all" href="/css/styles2.css" /> -->
    <link rel="stylesheet" media="all" href="/css/stylesheet-override2.css" />

</head>

  <body>

    <%- include('partials/header') %>

<p></p>
    <main>

        <div id="alert-banner-top" class="container-fluid" style="width: 100vw; padding-top: 1.5em; z-index: -1;">
            <div class="row">
                <div class="orange-banner" style="background-color: #ffb500; width: 100vw; min-height: max-content; justify-content: center;">    
                    <div class="mt-4 mb-1" style="margin-left: 7%;"> 
                      <% if  (project.bannerContent === 'yes') { %>
                        <span style="font-size: 1.4em; font-weight: 700;"><%= project.activityName %> </span>
                        <p><a href="/projects/<%= project._id %>">View Details</a></p>
                    <% } %>
                    </div> 
                </div>
            </div>
        </div>

<!-- ###  Main container  ### -->
     <div class="container4" style="padding-left: 5%; padding-right: 3%; margin-top: 20px; margin-bottom: 20px;"> 
        <!-- #########   start maps  ######## -->

       <div class="container-fluid">
          <div class="row"> 
            <div class="blockhead" style="display: block; margin-left: 3%;"> 
          <h1 class="wdot-dkgreen">SR 520 Construction Corner</h1>
          <p><strong>The go-to source for information on SR 520 construction and closures.</strong></p>
   
      </div>
          </div>
        </div>

        <div id="construction-map">
          <div class="row">     
            <div class="col-lg-9 col-md-12 col-sm-12" style="display: block;">   
                  <div class="togglerow" style="justify-content: space-between;"> 
                  <button id="map1Button" class="parallelogram-link map-tab" >SR 520 Construction Map</button>
                  <button id="map2Button" class="parallelogram-link map-tab" >WSDOT Travel Map</button>
                </div>
                  <!-- Map Column -->
              
                  
                        <div class="mapcontainer" style="max-width: 100%;">
                                  <div id="map1" style="display: block;">

                                    <%- include('partials/_mapPartial.ejs') %>               
                      
                                      </div>

                                      <!-- iframe Map -->
                        
                                  <div id="map2" class="d-none"><p></p> 
                                    <iframe src="https://wsdot.com/Travel/Real-time/Map/?featuretype=camera&featureid=9648" width="100%"  height="775px"></iframe>                
                                  
                                  </div>   
                             
                                </div >
                                <p style="font-size: 18px; font-weight: 400;"><i>Note: This tool is presented for planning purposes only. Construction work is dependent on weather and other factors, and activities are subject to change. </i></p>  
                      </div>
             
             
               
              <!-- Right Sidebar -->
              <div class="col-lg-3 vanishing pt-5 mt-5">
                <!-- Card 1 -->
                <div style="margin-left: 25px;">
        
                              <p class="text-center wdot-dkgreen"><strong>Closures Today</strong></p>
             
                     <% if (typeof currentClosures !== 'undefined' && currentClosures) { %>
                      
                        <% currentClosures.forEach(closure => { %>
                            <li class="closure-item">
                                <span class="icon-box"><img src="https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png" class="icon-img"></span>&nbsp;&nbsp;
                                <a href="/projects/<%= closure._id %>"><%= closure.activityName %></a>
                            </li>
                        <% }); %>
                    <% } %>
                    
           
                   
                    <% if (typeof upcomingClosures !== 'undefined' && upcomingClosures && upcomingClosures.length > 0) { %>
                        <p class="text-center wdot-dkgreen"><strong>Upcoming closures</strong></p>    
                        <% upcomingClosures.forEach(closure => { %>
                            <li class="closure-item">
                                <span class="icon-box"><img src="https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png" class="icon-img"></span>&nbsp;&nbsp;
                                <a href="/projects/<%= closure._id %>"><%= closure.activityName %></a>
                            </li>
                        <% }); %>
                    <% } else { %>
                        <li class="closure-item" style="display: none;">No upcoming closures</li>
                    <% } %>
                    
                    <br>
                  </div>                              
                </div>
                 
             <!-- END Right Sidebar col -->
                </div>
             </div>
         
        </div>   
      </div>
    </div>
   </div>

 </div>

      </main>
  
  
<!-- NEW container for cards start  -->
<%- include('partials/horizontal-cards') %>

 <!-- ## Start footer ###  -->
 <%- include('partials/footer') %>

<!-- ### End footer ### -->

<script>
    // Create the Leaflet map
    const map = L.map('map').setView([47.6407, -122.2971], 13);
    
    // Add Google Map layer to Leaflet map
    L.gridLayer.googleMutant({
        type: 'roadmap',
        maxZoom: 20,
        apiKey: 'AIzaSyCUt0Sdti_Aderhux8JNiFR-6ClvNIb7Gk'
    }).addTo(map);

    // Define activity icons
    const activityIcons = {
        "Full highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Partial highway closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Street and lane closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "Ramp closure": "https://sr520construction.blob.core.windows.net/520-uploads/whitedash-onred.png",
        "High-impact construction": "https://sr520construction.blob.core.windows.net/520-uploads/high_impact_construction.png",
        "Trail closure": "https://sr520construction.blob.core.windows.net/520-uploads/trail_closure.png",
        "Cameras": "https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png"
    };
    
    // Define default styling values
    const defaultColor = '#f4661a';
    const defaultWidth = 8;
    
    function fetchMapData(startDate = '', endDate = '', types = []) {
    const apiUrl = `/api/projects?startDate=${startDate}&endDate=${endDate}&types=${types.join(",")}`;
    console.log('Fetching data from:', apiUrl);

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            console.log('Data received:', data);
            if (data && data.length > 0) {
                data.forEach(project => {
                    if (!project.mapData || !Array.isArray(project.mapData)) {
                        console.warn(`Invalid mapData for project with ID ${project._id}`);
                        return;
                    }
                    
                    let geoJSONData = null;
                    if (typeof project.mapData[1] === 'string') {
                        try {
                            geoJSONData = JSON.parse(project.mapData[1]);
                        } catch (e) {
                            console.warn(`Failed to parse GeoJSON for project with ID ${project._id}:`, e);
                            return;
                        }
                    }

                    if (!geoJSONData) {
                        console.warn(`GeoJSON data is missing or invalid for project with ID ${project._id}`);
                        return;
                    }

                    const formattedStartDate = moment(project.startDate).format('MM/DD/YYYY');
                    const formattedEndDate = moment(project.endDate).format('MM/DD/YYYY');
                    const timingFeaturesHTML = project.timingFeatures.map(feature => `
                        <img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">
                        ${feature}
                    `).join(' ');

                    const activityTypeHTML = project.activityType.map(type => `
                        <img src="https://sr520construction.blob.core.windows.net/520-uploads/checked_mark.png" alt="Checked Mark" width="25" height="25">
                        ${type}
                    `).join(' ');



                    const popupContent = `
                        <div class="popup-content">
                            <h3>${project.activityName}</h3>
                            <p><span style="font-weight: 600">Start:</span> ${formattedStartDate}<br>
                            <span style="font-weight: 600">End:</span> ${formattedEndDate}<br>
                            <span style="font-weight: 600">Time:</span> ${project.time}</p>
                            <div class="timing-features">${timingFeaturesHTML}&nbsp;&nbsp;&nbsp;${activityTypeHTML} </div>                         
                            <p>${project.description || "Not specified"}</p>
                            <a href="/projects/${project._id}" class="greenBtn mt-3 mb-4" style="background-color: #243b3b; padding: 10px; color: #000; font-weight: 600; border-radius: 5px;" target="_blank">More information</a><br><br>
                        </div>
                    `;

                    const iconUrl = activityIcons[project.activityType[0]];
                    if (!iconUrl) {
                        console.warn(`No icon URL found for type: ${project.activityType[0]}`);
                        return;
                    }

                    const customIcon = L.icon({
                        iconUrl: iconUrl,
                        iconSize: [26, 26],
                        popupAnchor: [0, -41]
                    });


                    // start cameras
     // Sample data for the cameras
const cameras = [
    { 
        lat: 47.644611, 
        lng: -122.304694, 
        iframeSrc: 'https://share.earthcam.net/tJ90CoLmq7TzrY396Yd88B9B2qPMb6E316d3h59C-OM!/sr_520__-_montlake_project/camera_3/view_1'
    },
    { 
        lat: 47.645056, 
        lng: -122.301972, 
        iframeSrc: 'https://share.earthcam.net/tJ90CoLmq7TzrY396Yd88B9B2qPMb6E316d3h59C-OM!/sr_520__-_montlake_project/camera_1/view_1'
    },
    { 
        lat: 47.644861, 
        lng: -122.298111, 
        iframeSrc: 'https://share.earthcam.net/tJ90CoLmq7TzrY396Yd88B9B2qPMb6E316d3h59C-OM!/sr_520__-_montlake_project/camera_2/view_1'
    },
    { 
        lat: 47.644861, 
        lng: -122.298583, 
        iframeSrc: 'https://share.earthcam.net/tJ90CoLmq7TzrY396Yd88B9B2qPMb6E316d3h59C-OM!/sr_520__-_montlake_project/camera_4/view_1'
    }
];

// Define the camera icon
const cameraIcon = L.icon({
    iconUrl: 'https://sr520construction.blob.core.windows.net/520-uploads/icon_Camera.png',
    iconSize: [26, 26], // size of the icon
    popupAnchor: [0, -15] // point from which the popup should open relative to the iconAnchor
});

// Add each camera to the map
cameras.forEach(camera => {
    const marker = L.marker([camera.lat, camera.lng], { icon: cameraIcon }).addTo(map);

    // Attach a popup with the iframe to the camera

marker.bindPopup(
    `<div style="width: 100%; padding: 15px;"> 
         <p>
            <iframe src="${camera.iframeSrc}" style="width: 100%; height: 450px; border: none;"></iframe>
        </p>
    </div>`,
    {
        maxWidth: 480,  // This should align with whatever max width you've set
        minWidth: 480,  // You can set this to be the minimum size you want the popup to take
    }
);
});


// END camera section 


                    L.geoJSON(geoJSONData, {  // Note the use of geoJSONData here
                        style: function(feature) {
                            return {
                                color: feature.properties.color || defaultColor,
                                weight: feature.properties.width || defaultWidth
                            };
                        },
                        pointToLayer: function (feature, latlng) {
                            return L.marker(latlng, { icon: customIcon });
                        },
                        onEachFeature: function (feature, layer) {
                            layer.bindPopup(popupContent, {
                                autoPan: true,
                                autoPanPaddingTopLeft: L.point(10, 50),
                                autoPanPaddingBottomRight: L.point(10, 10)
                            });
                        }
                    }).addTo(map);
                });
            }
        })
        .catch(error => console.error('Error fetching map data:', error));
}

// Initial fetch of map data
fetchMapData();

document.addEventListener("DOMContentLoaded", function() {
    // Get the current date
    var today = moment().format('YYYY-MM-DD');

    // Calculate the date two weeks from today
    var twoWeeksLater = moment().add(14, 'days').format('YYYY-MM-DD');

    // Set the placeholder value for the start date input
    document.getElementById('start').setAttribute('value', today);

    // Set the value value for the end date input
    document.getElementById('end').setAttribute('value', twoWeeksLater);
});


    // Get reference to the mapData element from the form
    const mapDataElement = document.getElementById('mapData');
    if (mapDataElement && mapDataElement.value) {
        try {
            const geoJSONData = JSON.parse(mapDataElement.value);
                      L.geoJSON(geoJSONData, {
                style: function(feature) {
                    return {
                        color: feature.properties.color || defaultColor,
                        weight: feature.properties.width || defaultWidth
                    };
                }
            }).addTo(map);

        } catch (error) {
            console.warn("Failed to parse mapData from form:", error);
        }
    }

    let previousView = null;

    map.on('popupopen', function() {
        previousView = {
            center: map.getCenter(),
            zoom: map.getZoom()
        };
    });

    map.on('popupclose', function() {
        if (previousView) {
            map.setView(previousView.center, previousView.zoom);
        }
    });

    // Handle form submission and fetch data based on filters
    document.querySelector('form').addEventListener('submit', function (e) {
        e.preventDefault();

        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const types = Array.from(document.querySelectorAll('input[name="type"]:checked')).map(checkbox => checkbox.value);

        fetchMapData(startDate, endDate, types);
    });



</script>




<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" crossorigin="anonymous"></script>

  <!-- <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script> -->


    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
   <!-- ### Map toggle scripts -->
   <script> 
    const map1Button = document.getElementById('map1Button');
    const map2Button = document.getElementById('map2Button');
    const map1 = document.getElementById('map1');
    const map2 = document.getElementById('map2');
    
    map1Button.addEventListener('click', function() {
        map1.classList.remove('d-none');
        map1.classList.add('d-block');
        map2.classList.remove('d-block');
        map2.classList.add('d-none');
    });
    
    map2Button.addEventListener('click', function() {
        map1.classList.remove('d-block');
        map1.classList.add('d-none');
        map2.classList.remove('d-none');
        map2.classList.add('d-block');
      });

        </script>

</body>

</html>